/*
 * Copyright (C) 2025 Szabolcs Bazil Papp
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Lesser General Public License as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this program.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.aestallon.storageexplorer.spring.rest.api;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import com.aestallon.storageexplorer.spring.rest.model.ArcScriptEvalRequest;
import com.aestallon.storageexplorer.spring.rest.model.ArcScriptEvalResponse;
import com.aestallon.storageexplorer.spring.rest.model.EntryAcquisitionRequest;
import com.aestallon.storageexplorer.spring.rest.model.EntryAcquisitionResult;
import com.aestallon.storageexplorer.spring.rest.model.EntryLoadRequest;
import com.aestallon.storageexplorer.spring.rest.model.EntryLoadResult;
import com.aestallon.storageexplorer.spring.rest.model.LoginData;
import com.aestallon.storageexplorer.spring.rest.model.LoginResult;
import com.aestallon.storageexplorer.spring.rest.model.StorageIndexDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "Explorer", description = "the Explorer API")
public interface ExplorerApi {

    default ExplorerApiDelegate getDelegate() {
        return new ExplorerApiDelegate() {};
    }

    /**
     * POST /eval : Evaluates ArcScript against the storage overseen by the application
     * ... 
     *
     * @param arcScriptEvalRequest  (required)
     * @return Ok (status code 200)
     */
    @Operation(
        operationId = "eval",
        summary = "Evaluates ArcScript against the storage overseen by the application",
        description = "... ",
        tags = { "Explorer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ArcScriptEvalResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/eval",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ArcScriptEvalResponse> eval(
        @Parameter(name = "ArcScriptEvalRequest", description = "", required = true) @Valid @RequestBody ArcScriptEvalRequest arcScriptEvalRequest
    ) throws Exception {
        return getDelegate().eval(arcScriptEvalRequest);
    }


    /**
     * POST /acquire : Acquires one or more entries from the storage overseen by the application
     * ... 
     *
     * @param entryAcquisitionRequest  (required)
     * @return Ok (status code 200)
     */
    @Operation(
        operationId = "getStorageEntry",
        summary = "Acquires one or more entries from the storage overseen by the application",
        description = "... ",
        tags = { "Explorer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EntryAcquisitionResult.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/acquire",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<EntryAcquisitionResult> getStorageEntry(
        @Parameter(name = "EntryAcquisitionRequest", description = "", required = true) @Valid @RequestBody EntryAcquisitionRequest entryAcquisitionRequest
    ) throws Exception {
        return getDelegate().getStorageEntry(entryAcquisitionRequest);
    }


    /**
     * GET /storageIndex : Retrieves the index for the storage overseen by the application.
     * ... 
     *
     * @param method  (required)
     * @return Ok (status code 200)
     */
    @Operation(
        operationId = "getStorageIndex",
        summary = "Retrieves the index for the storage overseen by the application.",
        description = "... ",
        tags = { "Explorer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StorageIndexDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/storageIndex",
        produces = { "application/json" }
    )
    
    default ResponseEntity<StorageIndexDto> getStorageIndex(
        @NotNull @Parameter(name = "method", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "method", required = true) String method
    ) throws Exception {
        return getDelegate().getStorageIndex(method);
    }


    /**
     * POST /load : Fully loads an entry for inspection from the storage overseen by the application
     * ... 
     *
     * @param entryLoadRequest  (required)
     * @return Ok (status code 200)
     */
    @Operation(
        operationId = "loadStorageEntry",
        summary = "Fully loads an entry for inspection from the storage overseen by the application",
        description = "... ",
        tags = { "Explorer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EntryLoadResult.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/load",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<EntryLoadResult> loadStorageEntry(
        @Parameter(name = "EntryLoadRequest", description = "", required = true) @Valid @RequestBody EntryLoadRequest entryLoadRequest
    ) throws Exception {
        return getDelegate().loadStorageEntry(entryLoadRequest);
    }


    /**
     * POST /verify : Verifies the credentials of the user.
     * ... 
     *
     * @param loginData  (required)
     * @return Ok (status code 200)
     */
    @Operation(
        operationId = "verify",
        summary = "Verifies the credentials of the user.",
        description = "... ",
        tags = { "Explorer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginResult.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/verify",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<LoginResult> verify(
        @Parameter(name = "LoginData", description = "", required = true) @Valid @RequestBody LoginData loginData
    ) throws Exception {
        return getDelegate().verify(loginData);
    }

}
