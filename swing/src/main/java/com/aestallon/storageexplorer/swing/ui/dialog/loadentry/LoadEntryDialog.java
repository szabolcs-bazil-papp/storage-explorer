package com.aestallon.storageexplorer.swing.ui.dialog.loadentry;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.plaf.basic.BasicComboBoxRenderer;
import com.aestallon.storageexplorer.core.model.instance.StorageInstance;
import com.aestallon.storageexplorer.swing.ui.misc.IconProvider;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

public class LoadEntryDialog extends JDialog {
  private JPanel contentPane;
  private JButton buttonOK;
  private JButton buttonCancel;
  private JTextField textFieldSearchField;
  private JPanel panelControl;
  private JPanel panelForm;
  private JPanel panelField;
  private JLabel labelSearchField;
  private JLabel labelValidation;
  private JComboBox comboBoxStorageInstance;

  private final LoadEntryController controller;

  private boolean validationState = false;

  public LoadEntryDialog(LoadEntryController controller) {
    this.controller = controller;
    final var initialModel = controller.initialModel();

    initComboBox(initialModel);
    textFieldSearchField.setText(initialModel.input());
    SwingUtilities.invokeLater(() -> textFieldSearchField.requestFocusInWindow());

    setContentPane(contentPane);
    setModal(true);
    setTitle("Load Entry...");
    getRootPane().setDefaultButton(buttonOK);

    buttonOK.addActionListener(e -> onOK());

    buttonCancel.addActionListener(e -> onCancel());

    // call onCancel() when cross is clicked
    setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        onCancel();
      }
    });

    // call onCancel() on ESCAPE
    contentPane.registerKeyboardAction(e -> onCancel(),
        KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
        JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

    renderValidation();
    textFieldSearchField.getDocument().addDocumentListener(getSearchFieldListener());
  }

  @SuppressWarnings({ "unchecked", "rawtypes" })
  private void initComboBox(final LoadEntryDialogModel initialModel) {
    comboBoxStorageInstance.setModel(new DefaultComboBoxModel());
    for (final var instance : initialModel.options()) {
      comboBoxStorageInstance.addItem(instance);
    }
    comboBoxStorageInstance.setSelectedItem(initialModel.selection());
    comboBoxStorageInstance.setRenderer(new StorageInstanceRenderer());
  }

  private static class StorageInstanceRenderer extends BasicComboBoxRenderer {
    @Override
    public Component getListCellRendererComponent(JList<?> list, Object value,
                                                  int index, boolean isSelected,
                                                  boolean cellHasFocus) {

      super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

      if (value == null) {
        setText("None selected");
        setIcon(null);
        return this;
      }

      final StorageInstance instance = (StorageInstance) value;
      setText(instance.name());

      final ImageIcon icon = IconProvider.getIconForStorageInstance(instance);
      setIcon(icon);

      setHorizontalTextPosition(SwingConstants.RIGHT);
      setIconTextGap(10);
      return this;
    }
  }

  private DocumentListener getSearchFieldListener() {
    return new DocumentListener() {
      @Override
      public void insertUpdate(DocumentEvent e) {
        doValidate();
      }

      @Override
      public void removeUpdate(DocumentEvent e) {
        doValidate();
      }

      @Override
      public void changedUpdate(DocumentEvent e) {
        doValidate();
      }
    };
  }

  private void doValidate() {
    boolean valid = controller.validate(textFieldSearchField.getText());
    if (valid != validationState) {
      validationState = valid;
      renderValidation();
    }
  }

  private void renderValidation() {
    labelValidation.setIcon(validationState ? IconProvider.OK : IconProvider.NOT_OK);
    labelValidation.setForeground(validationState ? Color.GREEN : Color.RED);
    labelValidation.setText(validationState
        ? "Click OK to load!"
        : "This does not seem like a valid URI...");
    buttonOK.setEnabled(validationState);
  }

  private void onOK() {
    controller.finish(new LoadEntryDialogModel(
        textFieldSearchField.getText(),
        (StorageInstance) comboBoxStorageInstance.getSelectedItem(),
        null));
    dispose();
  }

  private void onCancel() {
    // add your code here if necessary
    dispose();
  }


  {
    // GUI initializer generated by IntelliJ IDEA GUI Designer
    // >>> IMPORTANT!! <<<
    // DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
   * call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    contentPane = new JPanel();
    contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
    contentPane.setMinimumSize(new Dimension(600, 197));
    contentPane.setOpaque(true);
    contentPane.setPreferredSize(new Dimension(600, 197));
    panelControl = new JPanel();
    panelControl.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
    contentPane.add(panelControl,
        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null,
            null, null, 0, false));
    final Spacer spacer1 = new Spacer();
    panelControl.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null,
        0, false));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
    panelControl.add(panel1,
        new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,
            null, 0, false));
    buttonOK = new JButton();
    buttonOK.setText("OK");
    panel1.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
        GridConstraints.FILL_HORIZONTAL,
        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    buttonCancel = new JButton();
    buttonCancel.setText("Cancel");
    panel1.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER,
        GridConstraints.FILL_HORIZONTAL,
        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    panelForm = new JPanel();
    panelForm.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
    contentPane.add(panelForm,
        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,
            null, 0, false));
    panelField = new JPanel();
    panelField.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
    panelForm.add(panelField,
        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,
            null, 0, false));
    labelSearchField = new JLabel();
    labelSearchField.setText("Enter URI:");
    panelField.add(labelSearchField,
        new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
            false));
    textFieldSearchField = new JTextField();
    textFieldSearchField.setFocusCycleRoot(false);
    panelField.add(textFieldSearchField,
        new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,
            GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    comboBoxStorageInstance = new JComboBox();
    panelField.add(comboBoxStorageInstance,
        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, new Dimension(140, -1), null, null, 0, false));
    labelValidation = new JLabel();
    labelValidation.setText("Label");
    panelForm.add(labelValidation,
        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
            false));
    labelSearchField.setLabelFor(textFieldSearchField);
  }

  /** @noinspection ALL */
  public JComponent $$$getRootComponent$$$() { return contentPane; }

}
